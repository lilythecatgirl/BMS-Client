#include "ChatBypass.h"
#include "../pch.h"
#include <locale>
#include <codecvt>

ChatBypass::ChatBypass() : IModule(0, Category::EXPLOIT, "Bypass anti spammer") {
	registerEnumSetting("Mode", &mode, 0);
	mode.addEntry("Unicode", 0);
	mode.addEntry("Alphabets", 1);
	mode.addEntry("aLPhaBeTs", 2);
	registerIntSetting("maxLength", &maxLength, maxLength, 1, 15);
	registerIntSetting("minLength", &minLength, minLength, 1, 15);
}

const char* ChatBypass::getModuleName() {
	return "ChatBypass";
}
std::string ChatBypass::generateText() {
	std::string text;
	if (mode.getSelectedValue() == 0) {
		for (size_t i = 0; i < random(minLength, maxLength); i++)
		{
			std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> converter;
			text += converter.to_bytes(static_cast<char32_t>(random(262144, 917503)));
		}
	}
	else if (mode.getSelectedValue() == 1) {
		for (size_t i = 0; i < random(minLength, maxLength); i++)
		{
			text += 'a' + rand() % 26;
		}
	}
	else if (mode.getSelectedValue() == 2) {
		for (size_t i = 0; i < random(minLength, maxLength); i++)
		{
			int r = rand() % 52;
			char base = (r < 26) ? 'A' : 'a';
			text += (char)(base + r % 26);
		}
	}
	return text;
}
void ChatBypass::onSendPacket(C_Packet* packet) {
	if (packet->isInstanceOf<C_TextPacket>()) {
		C_TextPacket* funy = reinterpret_cast<C_TextPacket*>(packet);
		std::string text = generateText() + " " + funy->message.getText() + " " + generateText();
		funy->message.resetWithoutDelete();
		funy->message = text;
	}
}

